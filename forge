#!/usr/bin/env python3

# Copyright (C) 2019-2020 Internet Systems Consortium, Inc. ("ISC")
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
"""Forge - testing tool for Kea and ISC DHCP."""

from __future__ import print_function
import os
import sys
import time
import json
import shutil
import string
import logging
import datetime
import argparse
import textwrap
import functools
import subprocess
import configparser
from urllib.parse import urljoin
from collections import defaultdict
try:
    import urllib.request
except:
    pass

log = logging.getLogger()

FORGE_INI = 'forge.ini'

SRV4_ADDR = "192.168.50.252"
CLNT4_ADDR = "192.168.50.2"
CLNT4_ADDR_2 = "192.168.51.2"
SRV_IPV6_ADDR_GLOBAL = "3000::1000"
MGMT_ADDRESS = "172.28.0.31"
MGMT_ADDRESS_2 = "172.28.0.32"
MGMT_ADDRESS_3 = "172.28.0.33"
DNS4_ADDR = SRV4_ADDR
#DNS6_ADDR = "2001:db8:0:f101::1"
DNS6_ADDR = SRV_IPV6_ADDR_GLOBAL
IFACE = "enp0s9"
SERVER_IFACE = "enp0s9"
INSTALL_METHOD = "make"

INIT_ALL = """
LOGLEVEL = "info"
IFACE = "{IFACE}"
#IFACE = "eth2"
SERVER_IFACE = "{SERVER_IFACE}"
#SERVER_IFACE = "eth2"
DNS4_ADDR = "{DNS4_ADDR}"
DNS6_ADDR = "{DNS6_ADDR}"
SOFTWARE_UNDER_TEST = "kea4_server", "bind9_server",
SOFTWARE_INSTALL_PATH = "/usr/local"
DB_TYPE = "memfile"
SHOW_PACKETS_FROM = "both"
SRV4_ADDR = "{SRV4_ADDR}"
REL4_ADDR = "0.0.0.0"
GIADDR4 = "192.168.50.3"
CIADDR = "192.168.50.3"
CLI_LINK_LOCAL = ""
copylist = []
removelist = []
OUTPUT_WAIT_INTERVAL = 1
OUTPUT_WAIT_MAX_INTERVALS = 2
PACKET_WAIT_INTERVAL = 1
SRV_IPV6_ADDR_GLOBAL = "{SRV_IPV6_ADDR_GLOBAL}"
SRV_IPV6_ADDR_LINK_LOCAL = "fe80::a00:27ff:fedf:63bc"
HISTORY = True
TCPDUMP = False
TCPDUMP_PATH = ""
SAVE_CONFIG_FILE = True
AUTO_ARCHIVE = False
SLEEP_TIME_1 = 1  # wait after starting remote server
SLEEP_TIME_2 = 2  # wait after all others commands
MGMT_ADDRESS = "{MGMT_ADDRESS}"
MGMT_ADDRESS_2 = "{MGMT_ADDRESS_2}"
MGMT_ADDRESS_3 = "{MGMT_ADDRESS_3}"
MGMT_USERNAME = "vagrant"
MGMT_PASSWORD = "vagrant"
SAVE_LOGS = True
BIND_LOG_TYPE = "ERROR"
BIND_LOG_LVL = 0
BIND_MODULE = "*"
SAVE_LEASES = True
DNS_IFACE = "enp0s9"
DNS_PORT = 53
DNS_SERVER_INSTALL_PATH = "/usr/sbin/"
DNS_DATA_PATH = "/etc/bind/"
ISC_DHCP_LOG_FACILITY = "local7"
ISC_DHCP_LOG_FILE = "/var/log/forge_dhcpd.log"
DB_NAME = "keadb"
DB_USER = "keauser"
DB_PASSWD = "keapass"
DB_HOST = ""
FABRIC_PTY = ""
INSTALL_METHOD = "{INSTALL_METHOD}"
"""


CONFIG_FIELDS = ['kea-dirs']


def _load_config():
    config = configparser.ConfigParser()
    if os.path.exists(FORGE_INI):
        config.read(FORGE_INI)
    if not config.has_section('Forge'):
        config.add_section('Forge')
    return config


def _save_config(config):
    with open(FORGE_INI, 'w') as configfile:
        config.write(configfile)


def update_config(name, value):
    if name not in CONFIG_FIELDS:
        raise Exception('Unknown config field %s' % name)
    if name == 'kea-dirs':
        value = os.path.abspath(value)
        if not os.path.exists(value):
            raise Exception('Folder %s does not exists.' % value)
        if not os.path.isdir(value):
            raise Exception('%s is not a directory.' % value)

    print('Setting %s to %s' % (name, value))
    cfg = _load_config()
    cfg.set('Forge', name, value)
    _save_config(cfg)


def show_config(name):
    cfg = _load_config()
    if name:
        if name not in CONFIG_FIELDS:
            raise Exception('Unknown config field %s' % name)
        print('%s = %s' % (name, cfg['Forge'][name]))
    else:
        for k, v in cfg['Forge'].items():
            print('%s = %s' % (k , v))


class ExecutionError(Exception):
    """Exception thrown when execution encountered an error."""
    pass


def execute(cmd, timeout=60, cwd=None, env=None, raise_error=True, dry_run=False, log_file_path=None,
            quiet=False, check_times=False, capture=False, interactive=False, attempts=1,
            sleep_time_after_attempt=None, log_prefix='{ts} '):
    """Execute a command in shell.

    :param str cmd: a command to be executed
    :param int timeout: timeout in number of seconds, after that time the command is terminated
                        but only if check_times is True
    :param str cwd: current working directory for the command
    :param dict env: dictionary with environment variables
    :param bool raise_error: if False then in case of error exception is not raised,
                             default: True ie exception is raise
    :param bool dry_run: if True then the command is not executed
    :param str log_file_path: if provided then all traces from the command are stored in indicated file
    :param bool quiet: if True then the command's traces are not printed to stdout
    :param bool check_times: if True then timeout is taken into account
    :param bool capture: if True then the command's traces are captured and returned by the function
    :param bool interactive: if True then stdin and stdout are not redirected, traces handling is disabled,
                             used for e.g. SSH
    :param int attemts: number of attempts to run the command if it fails
    :param int sleep_time_after_attempt: number of seconds to sleep before taking next attempt
    """
    log.info('>>>>> Executing %s in %s', cmd, cwd if cwd else os.getcwd())
    if not check_times:
        timeout = None
    if dry_run:
        return 0

    if 'sudo' in cmd and env:
        # if sudo is used and env is overridden then to preserve env add -E to sudo
        cmd = cmd.replace('sudo', 'sudo -E')

    if log_file_path:
        log_file = open(log_file_path, "wb")

    for attempt in range(attempts):
        if interactive:
            p = subprocess.Popen(cmd, cwd=cwd, env=env, shell=True)
            exitcode = p.wait()

        else:
            p = subprocess.Popen(cmd, cwd=cwd, env=env, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

            if capture:
                output = ''
            t0 = time.time()
            t1 = time.time()
            # repeat until process is running or timeout not occured
            while p.poll() is None and (timeout is None or t1 - t0 < timeout):
                line = p.stdout.readline()
                if line:
                    now = datetime.datetime.now()
                    lp = log_prefix.format_map(defaultdict(str, ts=now.strftime('%H:%M:%S.%f')))
                    line_decoded = lp + line.decode(errors='ignore').rstrip() + '\r'
                    if not quiet:
                        print(line_decoded)
                    if capture:
                        output += line_decoded
                    if log_file_path:
                        log_file.write(line)
                t1 = time.time()

            # If no exitcode yet, ie. process is still running then it means that timeout occured.
            # In such case terminate the process and raise an exception.
            if p.poll() is None:
                # kill using sudo to be able to kill other sudo commands
                execute('sudo kill -s TERM %s' % p.pid)
                time.sleep(5)
                # if still running, kill harder
                if p.poll() is None:
                    execute('sudo kill -s KILL %s' % p.pid)
                msg = "Execution timeout, %d > %d seconds elapsed (start: %d, stop %d), cmd: '%s'"
                msg = msg % (t1 - t0, timeout, t0, t1, cmd)
                raise ExecutionError(msg)
            exitcode = p.returncode

        if exitcode == 0:
            break
        elif attempt < attempts - 1:
            txt = 'command failed, retry, attempt %d/%d' % (attempt, attempts)
            if log_file_path:
                txt_to_file = '\n\n[FORGE] %s\n\n\n' % txt
                log_file.write(txt_to_file.encode('ascii'))
            log.info(txt)
            if sleep_time_after_attempt:
                time.sleep(sleep_time_after_attempt)

    if log_file_path:
        log_file.close()

    if exitcode != 0 and raise_error:
        raise ExecutionError("The command return non-zero exitcode %s, cmd: '%s'" % (exitcode, cmd))

    if capture:
        return exitcode, output
    return exitcode


def set_init_all(args):
    # generate init_all.py
    my_vars = globals()
    if hasattr(args, 'native') and args.native:
        my_vars['INSTALL_METHOD'] = 'native'
    txt = INIT_ALL.format(**my_vars)

    path = os.path.abspath('tests/init_all.py')
    with open(path, 'w') as f:
        f.write(txt)
    print('Generated %s.' % path)


def get_vagrant_dir(args):
    vagrant_dir = os.path.join('vagrant',
                               'lxc' if args.lxc else 'vbox',
                               args.sid if args.sid else 'default',
                               args.system)
    vagrant_dir = os.path.abspath(vagrant_dir)
    return vagrant_dir


def ensure_lxc_bridges(args):
    mgmt_brg = 'lxcfgmgmt' + args.sid if args.sid else 'lxcfgmgmt'
    traffic_brg = 'lxcfgtrf' + args.sid if args.sid else 'lxcfgtrf'

    for bridge in [mgmt_brg, traffic_brg]:
        execute('sudo brctl addbr %s' % bridge, raise_error=False)  # TODO: add detection if already exists
        execute('sudo ip link set dev %s up' % bridge)


def delete_lxc_bridges(args):
    mgmt_brg = 'lxcfgmgmt' + args.sid if args.sid else 'lxcfgmgmt'
    traffic_brg = 'lxcfgtrf' + args.sid if args.sid else 'lxcfgtrf'

    for bridge in [mgmt_brg, traffic_brg]:
        execute('sudo ip link set dev %s down' % bridge, raise_error=False)
        execute('sudo brctl delbr %s' % bridge, raise_error=False)  # TODO: add detection if already exists


def _get_server_name(args, idx):
    if args.system == 'ubuntu-18.04':
        short_sys = 'u1804'
    elif args.system == 'ubuntu-20.04':
        short_sys = 'u2004'
    elif args.system == 'fedora-30':
        short_sys = 'f30'
    elif args.system == 'fedora-32':
        short_sys = 'f32'
    else:
        raise Exception('unsupported system %s' % args.system)

    name = 'forge-srv%d-%s' % (idx, short_sys)
    if args.sid:
        name += '-' + args.sid

    return name


def _destroy_lxc_containers(args):
    client_name = 'forge-client-' + args.sid if args.sid else 'forge-client'
    server1_name = _get_server_name(args, 1)
    server2_name = _get_server_name(args, 2)

    for cntr in [client_name, server1_name, server2_name]:
        execute('sudo lxc-stop --name %s' % cntr, raise_error=False)
        execute('sudo lxc-destroy --name %s' % cntr, raise_error=False)


def setup(args):
    # load config
    cfg = _load_config()

    set_init_all(args)

    if args.lxc:
        vagrant_tpl = 'vagrant/Vagrantfile.lxc.in'
    else:
        vagrant_tpl = 'vagrant/Vagrantfile.in'

    if 'ubuntu' in args.system or 'debian' in args.system:
        pkg = 'deb'
    else:
        pkg = 'rpm'

    server_image = 'kea-' + args.system

    client_name = 'forge-client-' + args.sid if args.sid else 'forge-client'
    server1_name = _get_server_name(args, 1)
    server2_name = _get_server_name(args, 2)
    mgmt_brg = 'lxcfgmgmt' + args.sid if args.sid else 'lxcfgmgmt'
    traffic_brg = 'lxcfgtrf' + args.sid if args.sid else 'lxcfgtrf'

    # generate Vagrantfile
    with open(vagrant_tpl, 'r') as f_in:
        txt = f_in.read()
    tpl = string.Template(txt)
    txt = tpl.safe_substitute(KEA_DIRS=cfg['Forge']['kea-dirs'],
                              MGMT_ADDRESS=MGMT_ADDRESS,
                              MGMT_ADDRESS_2=MGMT_ADDRESS_2,
                              SRV4_ADDR=SRV4_ADDR,
                              CLNT4_ADDR=CLNT4_ADDR,
                              CLNT4_ADDR_2=CLNT4_ADDR_2,
                              SRV_IPV6_ADDR_GLOBAL=SRV_IPV6_ADDR_GLOBAL,
                              IFACE=IFACE,
                              SERVER_IFACE=SERVER_IFACE,
                              CLIENT_NAME=client_name,
                              SERVER1_NAME=server1_name,
                              SERVER2_NAME=server2_name,
                              MGMT_BRG=mgmt_brg,
                              TRAFFIC_BRG=traffic_brg,
                              SERVER_IMAGE=server_image,
                              PKG=pkg)
    vagrant_dir = get_vagrant_dir(args)
    if not os.path.exists(vagrant_dir):
        os.makedirs(vagrant_dir)
    vagrant_file = os.path.join(vagrant_dir, 'Vagrantfile')
    with open(vagrant_file, 'w') as f_out:
        f_out.write(txt)
    print('Generated %s.' % vagrant_file)

    # in case of LXC prepare bridges
    if args.lxc:
        ensure_lxc_bridges(args)

    if args.command == 'setup':
        # destroy VMs via Vagrant
        execute('vagrant destroy -f', cwd=vagrant_dir)

        if args.lxc:
            # in case of LXC to be sure destroys containers explicitly
            _destroy_lxc_containers(args)

        # create and start VMs via Vagrant
        execute('vagrant up', cwd=vagrant_dir)
    elif args.command == 'refresh':
        # reload and reprovision VMs via Vagrant if requested
        reload_ = args.reload
        provision = args.provision
        if not reload_ and not provision:
            reload_ = True
            provision = True
        if reload_:
            execute('vagrant reload', cwd=vagrant_dir)
        if provision:
            execute('vagrant provision', cwd=vagrant_dir)


def install_kea(args):
    ensure_lxc_bridges(args)

    vagrant_dir = get_vagrant_dir(args)
    execute('vagrant up', cwd=vagrant_dir, raise_error=False)

    if args.version:
        _install_kea_native(args)
    else:
        _install_kea_make(args)


def _install_kea_native(args):
    _install_kea_native_on_server(args, 1)
    _install_kea_native_on_server(args, 2)


def _install_kea_native_on_server(args, server_idx):
    vagrant_dir = get_vagrant_dir(args)
    server_name = _get_server_name(args, server_idx)
    log_prefix = "|%s {ts}| " % server_name
    cmd_tpl = 'vagrant ssh ' + server_name + ' -c "%s"'

    # copy hammer into vm and prepare system
    execute('rm -rf hammer.py', cwd=vagrant_dir)
    # TODO: return back
    #execute('wget https://gitlab.isc.org/isc-projects/kea/raw/master/hammer.py', cwd=vagrant_dir)
    execute('wget https://gitlab.isc.org/isc-projects/kea/raw/jenkins-migration-to-aws/hammer.py', cwd=vagrant_dir)
    execute('chmod a+x hammer.py', cwd=vagrant_dir)
    cmd = 'vagrant upload hammer.py %s' % server_name
    execute(cmd, cwd=vagrant_dir, attempts=3, log_prefix=log_prefix)

    cmd = cmd_tpl % './hammer.py prepare-system -p local -x unittest docs perfdhcp -w mysql,pgsql,radius,forge,shell'
    execute(cmd, cwd=vagrant_dir, log_prefix=log_prefix)

    # prepare pkg source repo url
    repository_url = 'https://packages.aws.isc.org'
    repo_name = 'kea-%s-%s' % ('1.9', args.system)
    repo_url = urljoin(repository_url, 'repository')
    repo_url += '/%s-ci/' % repo_name

    if 'ubuntu' in args.system:
        # setup pkg source repo in vm
        subcmd = "echo 'deb %s kea main' | sudo tee /etc/apt/sources.list.d/isc.list" % repo_url
        cmd = cmd_tpl % subcmd
        execute(cmd, cwd=vagrant_dir, log_prefix=log_prefix)
        key_url = "%s/repository/repo-keys/repo-key.gpg" % repository_url
        subcmd = 'wget -qO- %s | sudo apt-key add -' % key_url
        cmd = cmd_tpl % subcmd
        execute(cmd, cwd=vagrant_dir, log_prefix=log_prefix)

        cmd = cmd_tpl % 'sudo apt update'
        execute(cmd, cwd=vagrant_dir, log_prefix=log_prefix)

        # prepare packages list with versions
        pkgs = ["isc-kea-admin",
                "isc-kea-common",
                "isc-kea-ctrl-agent",
                "isc-kea-dev",
                "isc-kea-dhcp4-server",
                "isc-kea-dhcp6-server",
                "isc-kea-dhcp-ddns-server",
                "isc-kea-doc",
                "isc-kea-premium-cb-cmds",
                "isc-kea-premium-class-cmds",
                "isc-kea-premium-flex-id",
                "isc-kea-premium-forensic-log",
                "isc-kea-premium-host-cache",
                "isc-kea-premium-host-cmds",
                "isc-kea-premium-radius",
                "isc-kea-premium-subnet-cmds",
                "python3-isc-kea-connector"]

        sfx = '=' + args.version
        pkgs = [p + sfx for p in pkgs]
        pkgs = " ".join(pkgs)

        # install packages
        cmd = cmd_tpl % 'sudo apt install -y -o Dpkg::Options::="--force-confnew" %s' % pkgs
        env = os.environ.copy()
        env['DEBIAN_FRONTEND'] = 'noninteractive'
        execute(cmd, cwd=vagrant_dir, env=env, log_prefix=log_prefix)

    elif 'fedora' in args.system:
        # setup pkg source repo in vm
        subcmd = 'cat <<EOF | sudo tee /etc/yum.repos.d/isc.repo\n'
        subcmd += '[nexus]\n'
        subcmd += 'name=ISC Repo\n'
        subcmd += 'baseurl=%s\n' % repo_url
        subcmd += 'enabled=1\n'
        subcmd += 'gpgcheck=0\n'
        subcmd += 'EOF\n'
        cmd = cmd_tpl % subcmd
        execute(cmd, cwd=vagrant_dir, log_prefix=log_prefix)

        # prepare packages list with versions
        pkgs = ["isc-kea",
                "isc-kea-devel",
                "isc-kea-hooks",
                "isc-kea-libs",
                "isc-kea-premium-cb-cmds",
                "isc-kea-premium-class-cmds",
                "isc-kea-premium-flex-id",
                "isc-kea-premium-forensic-log",
                "isc-kea-premium-host-cache",
                "isc-kea-premium-host-cmds",
                "isc-kea-premium-radius",
                "isc-kea-premium-subnet-cmds"]

        if args.system == 'fedora-30':
            suffix = 'fc30'
        elif args.system == 'fedora-32':
            suffix = 'fc32'
        else:
            raise NotImplementedError("System %s not supported" % args.system)

        sfx = '-%s.%s' % (args.version, suffix)
        pkgs = [p + sfx for p in pkgs]
        pkgs = " ".join(pkgs)

        # install packages
        cmd = cmd_tpl % 'sudo dnf install -y %s' % pkgs
        env = os.environ.copy()
        execute(cmd, cwd=vagrant_dir, env=env, log_prefix=log_prefix)


def _install_kea_make(args):
    _install_kea_make_on_server(args, 1)
    _install_kea_make_on_server(args, 2)


def _install_kea_make_on_server(args, server_idx):
    server_name = _get_server_name(args, server_idx)
    cmd_tpl = 'vagrant ssh ' + server_name + ' -c "%s"'
    log_prefix = "|%s {ts}| " % server_name

    cfg = _load_config()
    kea_dirs = cfg['Forge']['kea-dirs']
    local_kea_path = os.path.join(kea_dirs, args.path)
    if args.path == '':
        print('Path to Kea folder is empty. Give one of these:')
        for d in sorted(os.listdir(kea_dirs)):
            p = os.path.join(kea_dirs, d)
            if os.path.isdir(p):
                print('  %s' % d)
        exit(1)
    if not os.path.exists(local_kea_path):
        raise Exception('Folder %s does not exists.' % local_kea_path)
    if not os.path.isdir(local_kea_path):
        raise Exception('Folder %s is not a directory.' % local_kea_path)

    remote_path = os.path.join('/kea-dirs', args.path)
    ## temporary WA begin
    execute('rm -rf %s/hammer.py' % remote_path)
    execute('wget https://gitlab.isc.org/isc-projects/kea/raw/jenkins-migration-to-aws/hammer.py', cwd=remote_path)
    execute('chmod a+x hammer.py', cwd=remote_path)
    ## temporary WA end
    subcmd_tpl = 'cd %s && ./hammer.py %s -p local -x unittest docs perfdhcp -w mysql,pgsql,radius,forge,shell'

    vagrant_dir = get_vagrant_dir(args)

    subcmd1 = subcmd_tpl % (remote_path, 'prepare-system')
    cmd1 = cmd_tpl % subcmd1
    execute(cmd1, cwd=vagrant_dir, log_prefix=log_prefix)

    subcmd2 = subcmd_tpl % (remote_path, 'build')
    cmd2 = cmd_tpl % subcmd2
    execute(cmd2, cwd=vagrant_dir, log_prefix=log_prefix)


def test(args, params):
    set_init_all(args)

    ensure_lxc_bridges(args)

    vagrant_dir = get_vagrant_dir(args)
    if not args.version:
        execute('vagrant up', cwd=vagrant_dir, raise_error=False)

    params = ' '.join(params)
    print('Test params: %s' % params)
    client_name = 'forge-client-' + args.sid if args.sid else 'forge-client'
    cmd = 'vagrant ssh ' + client_name + ' -c "%s"'
    subcmd = 'cd /forge/; sudo ~/venv/bin/pytest ' + params
    cmd %= subcmd
    try:
        execute(cmd, cwd=vagrant_dir, log_prefix='|%s {ts}| ' % client_name)  # , raise_error=False)
    except:
        # wait for all traces in executed command
        sys.stdout.flush()
        sys.stderr.flush()
        time.sleep(1)
        log.exception('ignored error in testing')


def clean(args):
    vagrant_dir = get_vagrant_dir(args)

    # destroy VMs
    execute('vagrant destroy -f', cwd=vagrant_dir, raise_error=False)

    if args.lxc:
        # in case of LXC to be sure destroys containers explicitly
        _destroy_lxc_containers(args)

    # clean files
    files_to_del = ['tests/init_all.py',
                    os.path.join(vagrant_dir, 'Vagrantfile'),
                    os.path.join(vagrant_dir, 'hammer.py')]
    for path in files_to_del:
        path = os.path.abspath(path)
        if os.path.exists(path):
            os.unlink(path)
            print('Deleted %s.' % path)
    shutil.rmtree(os.path.join(vagrant_dir, '.vagrant'))

    # delete bridges
    if args.lxc:
        delete_lxc_bridges(args)

def _get_latest_cloud_version(image_tpl):
    url = 'https://app.vagrantup.com/api/v1/box/' + image_tpl
    try:
        with urllib.request.urlopen(url) as response:
            data = response.read()
    except:
        log.exception('ignored exception')
        return 0
    cloud_meta = json.loads(data)

    if 'versions' not in cloud_meta:
        return 0
    latest_version = 0
    for ver in cloud_meta['versions']:
        provider_found = False
        for p in ver['providers']:
            if p['name'] == 'lxc':
                provider_found = True
                break
        if provider_found:
            try:
                v = int(ver['number'])
            except:
                return ver['number']
            if v > latest_version:
                latest_version = v
    return latest_version


def _package_box(lxc_name, vagrant_dir, box_name):
    lxc_box_dir = os.path.join(vagrant_dir, 'lxc-box')
    if os.path.exists(lxc_box_dir):
        execute('sudo rm -rf %s' % lxc_box_dir)
    os.mkdir(lxc_box_dir)
    lxc_container_path = os.path.join('/var/lib/lxc', lxc_name)
    execute('sudo bash -c \'echo "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8ia'
            'llvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ'
            '6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTB'
            'ckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6k'
            'ivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmB'
            'YSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYC'
            'zRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key"'
            '> %s/rootfs/home/vagrant/.ssh/authorized_keys\'' % lxc_container_path)
    cmd = 'sudo bash -c "'
    cmd += 'cd %s '
    cmd += '&& tar --numeric-owner --anchored --exclude=./rootfs/dev/log -czf %s/rootfs.tar.gz ./rootfs/*'
    cmd += '"'
    execute(cmd % (lxc_container_path, lxc_box_dir))
    execute('sudo cp %s/config %s/lxc-config' % (lxc_container_path, lxc_box_dir))
    execute('sudo chown `id -un`:`id -gn` *', cwd=lxc_box_dir)
    with open(os.path.join(lxc_box_dir, 'metadata.json'), 'w') as f:
        now = datetime.datetime.now()
        f.write('{\n')
        f.write('  "provider": "lxc",\n')
        f.write('  "version":  "1.0.0",\n')
        f.write('  "built-on": "%s"\n' % now.strftime('%c'))
        f.write('}\n')

    box_path = os.path.join(vagrant_dir, box_name + '.box')
    execute('tar -czf %s ./*' % box_path, cwd=lxc_box_dir)
    execute('sudo rm -rf %s' % lxc_box_dir)
    return box_path


def package_box_and_upload(args):
    if args.system == 'client':
        lxc_name = 'forge-client-' + args.sid
    else:
        if args.system == 'ubuntu-18.04':
            sn = 'u1804'
        elif args.system == 'fedora-30':
            sn = 'f30'
        else:
            sn = 'u1804'
        lxc_name = 'forge-srv1-%s-%s' % (sn, args.sid)

    vagrant_dir = get_vagrant_dir(args)

    box_name = 'forge-%s-%s' % ('srv' if 'srv' in lxc_name else 'clt', args.system)
    box_path = _package_box(lxc_name, vagrant_dir, box_name)

    image_tpl = 'godfryd/' + box_name
    latest_version = _get_latest_cloud_version(image_tpl)
    new_version = latest_version + 1
    cmd = "vagrant cloud publish -f -r %s %s %s %s"
    cmd = cmd % (image_tpl, new_version, 'lxc', box_path)
    execute(cmd)


def parse_args():
    """Parse arguments."""
    # used lambda to change args order and able to substitute width
    fl = functools.partial(lambda w, t: textwrap.fill(t, w), 80)
    description = [
        "Forge - testing tool for Kea and ISC DHCP.\n",
        "Basic steps for running Forge are as follows:\n"
        "1) first configure forge itself\n\n"
        "   ./forge config kea-dirs /path/to/kea/repos\n\n"
        "2) create VMs\n\n"
        "   ./forge setup\n\n"
        "3) install Kea in one of VMs\n\n"
        "   ./forge install-kea kea-subdir\n\n"
        "4) run indicated tests, parameters are directly passed to pytest\n\n"
        "   ./forge test -m v4\n"
    ]
    description = "\n".join(description)
    main_parser = argparse.ArgumentParser(description=description,
                                          formatter_class=argparse.RawDescriptionHelpFormatter)

    main_parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose mode.')
    main_parser.add_argument('-q', '--quiet', action='store_true', help='Enable quiet mode.')
    main_parser.add_argument('--lxc', action='store_true', default=False,
                             help='Use LXC instead of VirtualBox.')
    main_parser.add_argument('--sid', default=None,
                             help='ID of setup. If more setups needed in parallel then run with specific ID.')
    main_parser.add_argument('-s', '--system', default='ubuntu-18.04',
                             help="Server system name, default: 'ubuntu-18.04'")

    subparsers = main_parser.add_subparsers(
        dest='command',
        title="Forge commands",
        description=fl("The following commands are provided by Forge. "
                       "To get more information about particular command invoke: "
                       "./forge <command> -h.\n"))

    parser = subparsers.add_parser('config',
                                   help="Set config parameter in config file ie. forge.ini.")
    parser.add_argument('name', nargs='?', default=None,
                        help='Name of parameter.')
    parser.add_argument('value', nargs='?', default=None,
                        help='Value for indicated parameter.')
    parser = subparsers.add_parser('setup',
                                   help="Create VMs where testing happens.")
    parser = subparsers.add_parser('refresh',
                                   help="Refresh VMs ie. restart and re-provision")
    parser.add_argument('--reload', action='store_true',
                        help='Reload only.')
    parser.add_argument('--provision', action='store_true',
                        help='Re-provision only.')
    parser = subparsers.add_parser('install-kea',
                                   help="Install Kea into VM from indicated repository.")
    parser.add_argument('path', default='', nargs='?', help='Sub-path to the repository.')
    parser.add_argument('--version', help='Version of packages.')
    parser = subparsers.add_parser('test',
                                   help="Run tests. Parameters are passed directly to pytest.")
    parser.add_argument('--native', action='store_true', default=False,
                        help='Use native packages for testing')
    parser.add_argument('--version', help='Install given version of packages.')
    parser = subparsers.add_parser('clean',
                                   help="Destroy VMs")
    parser = subparsers.add_parser('box',
                                   help="Package LXC box and upload to cloud")

    #args = main_parser.parse_args()
    args, rest = main_parser.parse_known_args()
    return args, rest, main_parser


def main():
    """Main function - parse args and invoke proper command."""
    args, rest, parser = parse_args()

    # prepare logging
    level = logging.INFO
    if args.verbose:
        level = logging.DEBUG
    fmt = '[FORGE]  %(asctime)-15s  %(message)s'
    logging.basicConfig(format=fmt, level=level)

    log.info('args %s', args)

    # dispatch command
    if args.command == 'config':
        if args.value is not None:
            update_config(args.name, args.value)
        else:
            show_config(args.name)

    elif args.command == 'setup':
        setup(args)

    elif args.command == "refresh":
        setup(args)

    elif args.command == "install-kea":
        install_kea(args)

    elif args.command == "test":
        if args.version:
            install_kea(args)
        test(args, rest)

    elif args.command == "clean":
        clean(args)

    elif args.command == "box":
        package_box_and_upload(args)

    else:
        parser.print_help()


if __name__ == '__main__':
    main()
